/*
 * Copyright (C) 2020 Southern Storm Software, Pty Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
\file performance_masking.dox
\page performance_masking Performance of Masked Algorithms

\section perf_masking_intro Introduction

This page lists performance figures for masked implementations of
the algorithms.  All figures were calculated on an Arudino Due,
which is an ARM Cortex M3 running at 84MHz.

The average performance of the baseline unmasked algorithm is compared
with its masked counterpart to produce the figures below.  The figures
show the amount of overhead.  For example, if an algorithm has an
overhead of 6.91 for four shares, then that means that the 4-share
masked version is on average 6.91 times <b><i>slower</i></b> than
the baseline unmasked version.

Ideally, a masked algorithm with N shares would have an overhead of
roughly N, but this won't normally be the case.  Calls to the system
random number generator may be slow: the Arduino Due produces a new
random number every 84 clock cycles which can introduce delays.
As the number of shares increases, the delays due to random number
generation become more significant.

Some algorithms can do better than N.  Spook for example only masks the
initialization and finalization steps, with the rest using the regular
unmasked code.  So sometimes Spook does better than N.  But as N increases,
the random number generation overhead becomes more significant.

"Degree of Masking" in the table below indicates how much of the algorithm
runtime is masked.  A value of "Init/Final" indicates that initialization
and finalization tasks that involve the key are masked but everything else
uses the baseline unmasked code.  A value of "Init" indicates that only
initialization is masked.  A value of "Full" indicates that every block
operation is fully masked.

\section perf_masking_cortex_m3 Performance on ARM Cortex M3

Where a NIST submission contains multiple algorithms in a family,
<b><i>bold italics</i></b> indicates the primary algorithm in the family.
Lower numbers are better.

<table>
<tr><td>Algorithm</td><td>Degree of Masking</td><td>2 shares</td><td>3 shares</td><td>4 shares</td><td>5 shares</td><td>6 shares</td></tr>
<tr><td><b><i>ASCON-128</i></b></td><td>Init/Final</td><td align="right">2.15</td><td align="right">4.18</td><td align="right">6.91</td><td align="right">11.23</td><td align="right">16.07</td></tr>
<tr><td><b><i>ASCON-128</i></b></td><td>Full</td><td align="right">3.60</td><td align="right">8.22</td><td align="right">15.21</td><td align="right">24.29</td><td align="right">35.56</td></tr>
<tr><td>ASCON-128a</td><td>Init/Final</td><td align="right">2.42</td><td align="right">5.01</td><td align="right">8.32</td><td align="right">13.67</td><td align="right">19.69</td></tr>
<tr><td>ASCON-128a</td><td>Full</td><td align="right">3.69</td><td align="right">8.27</td><td align="right">15.51</td><td align="right">24.36</td><td align="right">36.21</td></tr>
<tr><td>ASCON-80pq</td><td>Init/Final</td><td align="right">2.16</td><td align="right">4.11</td><td align="right">6.93</td><td align="right">11.29</td><td align="right">16.15</td></tr>
<tr><td>ASCON-80pq</td><td>Full</td><td align="right">3.54</td><td align="right">8.25</td><td align="right">14.96</td><td align="right">24.38</td><td align="right">34.95</td></tr>
<tr><td><b><i>GIFT-COFB</i></b></td><td>Full</td><td align="right">6.28</td><td align="right">19.27</td><td align="right">36.84</td><td align="right">62.16</td><td align="right">91.22</td></tr>
<tr><td><b><i>GIMLI-24</i></b><td>Init</td></td><td align="right">2.69</td><td align="right">6.28</td><td align="right">11.93</td><td align="right">19.80</td><td align="right">29.33</td></tr>
<tr><td><b><i>GIMLI-24</i></b><td>Full</td></td><td align="right">10.50</td><td align="right">31.41</td><td align="right">60.37</td><td align="right">106.37</td><td align="right">159.46</td></tr>
<tr><td><b><i>Pyjamask-128-AEAD</i></b></td><td>Full</td><td align="right">2.94</td><td align="right">3.05</td><td align="right">5.31</td><td align="right">5.74</td><td align="right">8.14</td></tr>
<tr><td>Pyjamask-96-AEAD</td><td>Full</td><td align="right">2.94</td><td align="right">3.06</td><td align="right">5.33</td><td align="right">5.73</td><td align="right">8.14</td></tr>
<tr><td><b><i>SpoC-128</i></b></td><td>Full</td><td align="right">6.65</td><td align="right">19.39</td><td align="right">38.57</td><td align="right">63.26</td><td align="right">95.21</td></tr>
<tr><td>SpoC-64</td><td>Full</td><td align="right">4.02</td><td align="right">11.06</td><td align="right">20.38</td><td align="right">35.05</td><td align="right">50.44</td></tr>
<tr><td>Spook-128-384-mu</td><td>Init/Final</td><td align="right">1.71</td><td align="right">3.33</td><td align="right">5.50</td><td align="right">8.07</td><td align="right">11.47</td></tr>
<tr><td>Spook-128-512-mu</td><td>Init/Final</td><td align="right">1.73</td><td align="right">3.35</td><td align="right">5.41</td><td align="right">8.15</td><td align="right">11.22</td></tr>
<tr><td>Spook-128-384-su</td><td>Init/Final</td><td align="right">1.72</td><td align="right">3.34</td><td align="right">5.53</td><td align="right">8.09</td><td align="right">11.52</td></tr>
<tr><td><b><i>Spook-128-512-su</i></b></td><td>Init/Final</td><td align="right">1.74</td><td align="right">3.36</td><td align="right">5.43</td><td align="right">8.17</td><td align="right">11.26</td></tr>
<tr><td><b><i>TinyJAMBU-128</i></b></td><td>Full</td><td align="right">3.16</td><td align="right">8.04</td><td align="right">14.59</td><td align="right">25.65</td><td align="right">43.13</td></tr>
<tr><td>TinyJAMBU-192</td><td>Full</td><td align="right">3.24</td><td align="right">8.25</td><td align="right">14.94</td><td align="right">26.24</td><td align="right">44.27</td></tr>
<tr><td>TinyJAMBU-256</td><td>Full</td><td align="right">3.25</td><td align="right">8.31</td><td align="right">15.08</td><td align="right">26.49</td><td align="right">44.86</td></tr>
<tr><td><b><i>Xoodyak</i></b><td>Init</td></td><td align="right">1.94</td><td align="right">3.76</td><td align="right">6.39</td><td align="right">10.31</td><td align="right">14.51</td></tr>
<tr><td><b><i>Xoodyak</i></b><td>Full</td></td><td align="right">5.89</td><td align="right">15.86</td><td align="right">28.53</td><td align="right">47.70</td><td align="right">69.57</td></tr>
</table>

It was observed that about 30% of the overhead of the 4-share version was
due to Arduino Due's TRNG which produces a new 32-bit random word every 84
clock cycles.  The code had to stop and wait for the TRNG quite a bit.
On a different CPU with a faster TRNG, the results would be better.

Pyjamask and Spook were designed by the authors with masking in mind
as a primary goal.  The other algorithms were not designed with masking
as a primary goal.

ISAP and DryGASCON also provide side-channel protection but it is built
into the standard design with no masking required.  If they were to appear
in the above table, all columns would be set to "1.00".

\section perf_masking_opt Optimisation tricks

This section describes some optimisations for masked ciphers that I
encountered while writing the above implementations.  These tricks may
help other implementers of masked algorithms in C and assembly code.

Random number generation overhead can add a lot of overhead to the runtime.
Some CPU's offer a built-in TRNG but it may take a lot of clock cycles to
generate each new random word (84 for the Arduino Due).  It helps if the
RNG calls can be spaced out with more regular instructions between the calls.
Then less time is spent polling for the next random word.

Operate on individual shares as much as possible: do everything on A,
then everything on B, etc.  This reduces the register spills that occur
when switching between shares.  AND steps are where it becomes difficult
because all shares are needed to do those steps.  Try to group the simpler
XOR masking steps before and after the AND steps so that the shares
can be operated on independently in most of the code.

Sometimes it can belp to operate on the shares in reverse order just
before an AND step.  The 3-share AND code operates on A, then B,
then C.  If the previous steps were operating on C, then B, then A,
then A and parts of B are already in registers ready for the start
of the AND.

Also see my page on \ref masking "masking utilities".

*/
